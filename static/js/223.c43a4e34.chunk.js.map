{"version":3,"file":"static/js/223.c43a4e34.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.js","Pages/AddContacts/AddContacts.style.js","Pages/AddContacts/AddContacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 10px;\n  align-items: center;\n`;\n\nexport const Wrapper = styled.div`\n  width: 500px;\n  font-weight: 500;\n  padding: 10px;\n`;\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  align-items: end;\n  gap: 10px;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  padding: 8px;\n  min-width: 50px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 50%;\n  border: none;\n  background: transparent;\n  text-align: center;\n  color: ${({ theme }) => theme.colors.textPrimary};\n  cursor: pointer;\n  transition: transform 250ms ease-in-out, color 250ms ease-in-out;\n\n  &:hover {\n    color: #47a76a;\n    transform: scale(1.1);\n  }\n\n  &:active {\n    color: #47a76a;\n    transform: scale(1.1);\n  }\n`;\n","import { ErrorMessage, Field, Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { FiUserPlus } from 'react-icons/fi';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  Wrapper,\n  Button,\n  InputWrapper,\n} from './ContactsForm.styled';\nimport { PatternFormat } from 'react-number-format';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNewContact, updatePhonebook } from 'redux/contactsSlice';\nimport { TextField } from '@mui/material';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\nimport PhoneEnabledIcon from '@mui/icons-material/PhoneEnabled';\nimport toast from 'react-hot-toast';\n\nconst ContactsSchema = Yup.object().shape({\n  name: Yup.string().required('* Name is required'),\n  number: Yup.string().required('* Phone number is required'),\n});\n\nconst initialValues = { name: '', number: '' };\n\nexport const ContactsForm = () => {\n  const allcontacts = useSelector(updatePhonebook);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (allcontacts.find(contact => contact.name === values.name)) {\n      return alert(`${values.name} is already in contacts`);\n    }\n\n    if (allcontacts.find(contact => contact.number === values.number)) {\n      return alert(`${values.number} is already in contacts`);\n    }\n\n    dispatch(addNewContact({ ...values, id: nanoid() }));\n    toast.success(\n      <div>\n        <b>{values.name}</b> added in phonebook\n      </div>,\n      {\n        duration: 4000,\n        icon: 'âœ…',\n      }\n    );\n    resetForm();\n  };\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={ContactsSchema}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm autoComplete=\"off\">\n          <InputWrapper>\n            <PersonOutlineIcon sx={{ fontSize: 36 }} />\n            <Field\n              as={TextField}\n              label=\"Name\"\n              name=\"name\"\n              multiline\n              variant=\"standard\"\n              style={{ width: '300px' }}\n              className=\"fieldName\"\n            />\n          </InputWrapper>\n          <ErrorMessage name=\"name\" component=\"span\" style={{ color: 'red' }} />\n\n          <InputWrapper>\n            <PhoneEnabledIcon sx={{ fontSize: 36 }} />\n            <Field\n              as={PatternFormat}\n              customInput={TextField}\n              name=\"number\"\n              variant=\"standard\"\n              style={{ width: '300px' }}\n              format=\"+38 (0##) ### ## ##\"\n              allowEmptyFormatting={true}\n              mask=\"_\"\n            />\n          </InputWrapper>\n          <ErrorMessage\n            name=\"number\"\n            component=\"span\"\n            style={{ color: 'red' }}\n          />\n\n          <Button type=\"submit\">\n            <FiUserPlus size={26} />\n          </Button>\n        </StyledForm>\n      </Formik>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  padding-top: 40px;\n  font-size: 14px;\n\n  h2 {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const AvatarWrapper = styled.div`\n  display: flex;\n  gap: 135px;\n`;\n\nexport const BackBtn = styled(Link)`\n  color: #696969;\n  transition: color 250ms ease-in-out;\n\n  &:hover {\n    color: #47a76a;\n  }\n\n  &:active {\n    color: #47a76a;\n  }\n`;\n","import { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport { Wrapper, AvatarWrapper, BackBtn } from './AddContacts.style';\nimport { TbArrowBackUp } from 'react-icons/tb';\n\nconst AddContacts = () => {\n  return (\n    <Wrapper>\n      <h2>Create Contact</h2>\n      <AvatarWrapper>\n        <BackBtn to=\"/\">\n          <TbArrowBackUp size={'30px'} />\n        </BackBtn>\n        <AccountCircleIcon sx={{ fontSize: '210px', color: '#e5e5e5' }} />\n      </AvatarWrapper>\n      <hr />\n      <ContactsForm />\n    </Wrapper>\n  );\n};\n\nexport default AddContacts;\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","InputWrapper","_templateObject3","Button","_templateObject4","_ref","theme","colors","textPrimary","ContactsSchema","Yup","shape","name","required","number","initialValues","ContactsForm","allcontacts","useSelector","updatePhonebook","dispatch","useDispatch","_jsx","children","Formik","validationSchema","onSubmit","values","resetForm","find","contact","alert","concat","addNewContact","_objectSpread","toast","_jsxs","duration","icon","autoComplete","PersonOutlineIcon","sx","fontSize","Field","as","TextField","label","multiline","variant","style","width","className","ErrorMessage","component","color","PhoneEnabledIcon","PatternFormat","customInput","format","allowEmptyFormatting","mask","type","FiUserPlus","AvatarWrapper","BackBtn","Link","to","TbArrowBackUp","AccountCircleIcon"],"sourceRoot":""}