{"version":3,"file":"static/js/509.c9c8cfc8.chunk.js","mappings":"mQAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+GAQzBC,EAAUJ,EAAAA,GAAAA,IAAUK,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kEAMpBG,EAAeN,EAAAA,GAAAA,IAAUO,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+DAMzBK,EAASR,EAAAA,GAAAA,OAAaS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,oc,oECL7BO,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KAAaG,SAAS,sBAC5BC,OAAQJ,EAAAA,KAAaG,SAAS,gCAuFhC,EApFoB,WAClB,IAAME,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,EAAiBL,EAAYM,MAAK,SAAAC,GAAO,OAAIA,EAAQJ,KAAOA,CAAE,IAE9DK,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,CACpBb,KAAMQ,EAAiBA,EAAeR,KAAO,GAC7CE,OAAQM,EAAiBA,EAAeN,OAAS,IA2BnD,OACEY,EAAAA,EAAAA,KAACvB,EAAO,CAAAwB,UACND,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLH,cAAeA,EACfI,iBAAkBpB,EAClBqB,SA7Be,SAAAC,GACnB,GAAIhB,EAAYM,MAAK,SAAAC,GAAO,OAAIA,EAAQV,OAASmB,EAAOnB,IAAI,IAC1D,OAAOoB,MAAM,GAADC,OAAIF,EAAOnB,KAAI,4BAG7B,GAAIG,EAAYM,MAAK,SAAAC,GAAO,OAAIA,EAAQR,SAAWiB,EAAOjB,MAAM,IAC9D,OAAOkB,MAAM,GAADC,OAAIF,EAAOjB,OAAM,4BAG/B,IAAMoB,EAAiB,CAAEtB,KAAMmB,EAAOnB,KAAME,OAAQiB,EAAOjB,OAAQI,GAAAA,GAEnEK,GAASY,EAAAA,EAAAA,IAAcD,IAEvBE,EAAAA,GAAAA,SACEC,EAAAA,EAAAA,MAAA,OAAAV,SAAA,CAAK,YACKD,EAAAA,EAAAA,KAAA,KAAAC,SAAII,EAAOnB,OAAS,eAE9B,CACE0B,SAAU,IACVC,KAAM,UAGZ,EAO6BZ,UAEvBU,EAAAA,EAAAA,MAACvC,EAAU,CAAC0C,aAAa,MAAKb,SAAA,EAC5BU,EAAAA,EAAAA,MAAChC,EAAY,CAAAsB,SAAA,EACXD,EAAAA,EAAAA,KAACe,EAAAA,EAAiB,CAACC,GAAI,CAAEC,SAAU,OACnCjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,MAAM,OACNnC,KAAK,OACLoC,WAAS,EACTC,QAAQ,WACRC,MAAO,CAAEC,MAAO,SAChBC,UAAU,kBAGd1B,EAAAA,EAAAA,KAAC2B,EAAAA,GAAY,CAACzC,KAAK,OAAO0C,UAAU,OAAOJ,MAAO,CAAEK,MAAO,UAE3DlB,EAAAA,EAAAA,MAAChC,EAAY,CAAAsB,SAAA,EACXD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAgB,CAACd,GAAI,CAAEC,SAAU,OAClCjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CACJC,GAAIY,EAAAA,GACJC,YAAaZ,EAAAA,EACblC,KAAK,SACLqC,QAAQ,WACRC,MAAO,CAAEC,MAAO,SAChBQ,OAAO,sBACPC,sBAAsB,EACtBC,KAAK,UAGTnC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAY,CACXzC,KAAK,SACL0C,UAAU,OACVJ,MAAO,CAAEK,MAAO,UAGlB7B,EAAAA,EAAAA,KAACnB,EAAM,CAACuD,KAAK,SAAQnC,SAAC,eAKhC,C","sources":["Pages/ContactEdit/ContactEdit.styled.js","Pages/ContactEdit/ContactEdit.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 10px;\n  align-items: center;\n`;\n\nexport const Wrapper = styled.div`\n  width: 500px;\n  font-weight: 500;\n  padding: 10px;\n`;\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  align-items: end;\n  gap: 10px;\n`;\n\nexport const Button = styled.button`\n  padding: 12px;\n  align-self: flex-start;\n  margin-left: 55px;\n  margin-top: 15px;\n  min-width: 105px;\n  background-color: rgb(102, 102, 102);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transition: box-shadow 250ms ease-in-out;\n\n  &:hover {\n    box-shadow: -1px 0px 8px -2px rgba(0, 0, 0, 0.75);\n  }\n\n  &:active {\n    box-shadow: -1px 0px 8px -2px rgba(0, 0, 0, 0.75);\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { updateContact, updatePhonebook } from 'redux/contactsSlice';\nimport {\n  StyledForm,\n  Wrapper,\n  Button,\n  InputWrapper,\n} from './ContactEdit.styled';\nimport { ErrorMessage, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { PatternFormat } from 'react-number-format';\nimport { TextField } from '@mui/material';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\nimport PhoneEnabledIcon from '@mui/icons-material/PhoneEnabled';\nimport toast from 'react-hot-toast';\n\nconst ContactsSchema = Yup.object().shape({\n  name: Yup.string().required('* Name is required'),\n  number: Yup.string().required('* Phone number is required'),\n});\n\nconst ContactEdit = () => {\n  const allcontacts = useSelector(updatePhonebook);\n  const { id } = useParams();\n  const currentContact = allcontacts.find(contact => contact.id === id);\n\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: currentContact ? currentContact.name : '',\n    number: currentContact ? currentContact.number : '',\n  };\n\n  const handleSubmit = values => {\n    if (allcontacts.find(contact => contact.name === values.name)) {\n      return alert(`${values.name} is already in contacts`);\n    }\n\n    if (allcontacts.find(contact => contact.number === values.number)) {\n      return alert(`${values.number} is already in contacts`);\n    }\n\n    const updatedContact = { name: values.name, number: values.number, id };\n\n    dispatch(updateContact(updatedContact));\n\n    toast.success(\n      <div>\n        Contact <b>{values.name}</b> updated!\n      </div>,\n      {\n        duration: 4000,\n        icon: 'âœ…',\n      }\n    );\n  };\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={ContactsSchema}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm autoComplete=\"off\">\n          <InputWrapper>\n            <PersonOutlineIcon sx={{ fontSize: 36 }} />\n            <Field\n              as={TextField}\n              label=\"Name\"\n              name=\"name\"\n              multiline\n              variant=\"standard\"\n              style={{ width: '300px' }}\n              className=\"fieldName\"\n            />\n          </InputWrapper>\n          <ErrorMessage name=\"name\" component=\"span\" style={{ color: 'red' }} />\n\n          <InputWrapper>\n            <PhoneEnabledIcon sx={{ fontSize: 36 }} />\n            <Field\n              as={PatternFormat}\n              customInput={TextField}\n              name=\"number\"\n              variant=\"standard\"\n              style={{ width: '300px' }}\n              format=\"+38 (0##) ### ## ##\"\n              allowEmptyFormatting={true}\n              mask=\"_\"\n            />\n          </InputWrapper>\n          <ErrorMessage\n            name=\"number\"\n            component=\"span\"\n            style={{ color: 'red' }}\n          />\n\n          <Button type=\"submit\">Edit</Button>\n        </StyledForm>\n      </Formik>\n    </Wrapper>\n  );\n};\n\nexport default ContactEdit;\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","InputWrapper","_templateObject3","Button","_templateObject4","ContactsSchema","Yup","shape","name","required","number","allcontacts","useSelector","updatePhonebook","id","useParams","currentContact","find","contact","dispatch","useDispatch","initialValues","_jsx","children","Formik","validationSchema","onSubmit","values","alert","concat","updatedContact","updateContact","toast","_jsxs","duration","icon","autoComplete","PersonOutlineIcon","sx","fontSize","Field","as","TextField","label","multiline","variant","style","width","className","ErrorMessage","component","color","PhoneEnabledIcon","PatternFormat","customInput","format","allowEmptyFormatting","mask","type"],"sourceRoot":""}